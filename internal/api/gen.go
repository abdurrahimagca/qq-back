//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for UpdateMeProfileJSONBodyPrivacyLevel.
const (
	FullPrivate UpdateMeProfileJSONBodyPrivacyLevel = "full_private"
	Private     UpdateMeProfileJSONBodyPrivacyLevel = "private"
	Public      UpdateMeProfileJSONBodyPrivacyLevel = "public"
)

// SendOtpJSONBody defines parameters for SendOtp.
type SendOtpJSONBody struct {
	// Email Email address of the user
	Email string `json:"email"`
}

// VerifyOtpJSONBody defines parameters for VerifyOtp.
type VerifyOtpJSONBody struct {
	// Email Email address of the user
	Email string `json:"email"`

	// OtpCode OTP code received via email
	OtpCode string `json:"otpCode"`
}

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	// RefreshToken Refresh token for the user
	RefreshToken string `json:"refreshToken"`
}

// UpdateMeProfileJSONBody defines parameters for UpdateMeProfile.
type UpdateMeProfileJSONBody struct {
	// DisplayName Display name of the user
	DisplayName *string `json:"displayName"`

	// PrivacyLevel Privacy level of the user, public, private, full_private
	PrivacyLevel *UpdateMeProfileJSONBodyPrivacyLevel `json:"privacyLevel"`

	// Username Username of the user
	Username *string `json:"username"`
}

// UpdateMeProfileJSONBodyPrivacyLevel defines parameters for UpdateMeProfile.
type UpdateMeProfileJSONBodyPrivacyLevel string

// CheckUsernameAvailableJSONBody defines parameters for CheckUsernameAvailable.
type CheckUsernameAvailableJSONBody struct {
	// Username Username to check
	Username *string `json:"username,omitempty"`
}

// SendOtpJSONRequestBody defines body for SendOtp for application/json ContentType.
type SendOtpJSONRequestBody SendOtpJSONBody

// VerifyOtpJSONRequestBody defines body for VerifyOtp for application/json ContentType.
type VerifyOtpJSONRequestBody VerifyOtpJSONBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// UpdateMeProfileJSONRequestBody defines body for UpdateMeProfile for application/json ContentType.
type UpdateMeProfileJSONRequestBody UpdateMeProfileJSONBody

// CheckUsernameAvailableJSONRequestBody defines body for CheckUsernameAvailable for application/json ContentType.
type CheckUsernameAvailableJSONRequestBody CheckUsernameAvailableJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SendOtpWithBody request with any body
	SendOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendOtp(ctx context.Context, body SendOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyOtpWithBody request with any body
	VerifyOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyOtp(ctx context.Context, body VerifyOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshTokenWithBody request with any body
	RefreshTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RefreshToken(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeAvatar request
	GetMeAvatar(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeProfile request
	GetMeProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMeProfileWithBody request with any body
	UpdateMeProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMeProfile(ctx context.Context, body UpdateMeProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckUsernameAvailableWithBody request with any body
	CheckUsernameAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckUsernameAvailable(ctx context.Context, body CheckUsernameAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SendOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendOtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendOtp(ctx context.Context, body SendOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendOtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyOtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyOtp(ctx context.Context, body VerifyOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyOtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshToken(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeAvatar(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeAvatarRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMeProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMeProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMeProfile(ctx context.Context, body UpdateMeProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMeProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckUsernameAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckUsernameAvailableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckUsernameAvailable(ctx context.Context, body CheckUsernameAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckUsernameAvailableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSendOtpRequest calls the generic SendOtp builder with application/json body
func NewSendOtpRequest(server string, body SendOtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendOtpRequestWithBody(server, "application/json", bodyReader)
}

// NewSendOtpRequestWithBody generates requests for SendOtp with any type of body
func NewSendOtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/otp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyOtpRequest calls the generic VerifyOtp builder with application/json body
func NewVerifyOtpRequest(server string, body VerifyOtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyOtpRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyOtpRequestWithBody generates requests for VerifyOtp with any type of body
func NewVerifyOtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/otp-verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRefreshTokenRequest calls the generic RefreshToken builder with application/json body
func NewRefreshTokenRequest(server string, body RefreshTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRefreshTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewRefreshTokenRequestWithBody generates requests for RefreshToken with any type of body
func NewRefreshTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/refresh-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeAvatarRequest generates requests for GetMeAvatar
func NewGetMeAvatarRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeProfileRequest generates requests for GetMeProfile
func NewGetMeProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMeProfileRequest calls the generic UpdateMeProfile builder with application/json body
func NewUpdateMeProfileRequest(server string, body UpdateMeProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMeProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateMeProfileRequestWithBody generates requests for UpdateMeProfile with any type of body
func NewUpdateMeProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/update-profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckUsernameAvailableRequest calls the generic CheckUsernameAvailable builder with application/json body
func NewCheckUsernameAvailableRequest(server string, body CheckUsernameAvailableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckUsernameAvailableRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckUsernameAvailableRequestWithBody generates requests for CheckUsernameAvailable with any type of body
func NewCheckUsernameAvailableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/username-available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SendOtpWithBodyWithResponse request with any body
	SendOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendOtpResponse, error)

	SendOtpWithResponse(ctx context.Context, body SendOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*SendOtpResponse, error)

	// VerifyOtpWithBodyWithResponse request with any body
	VerifyOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyOtpResponse, error)

	VerifyOtpWithResponse(ctx context.Context, body VerifyOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyOtpResponse, error)

	// RefreshTokenWithBodyWithResponse request with any body
	RefreshTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshTokenResponse, error)

	RefreshTokenWithResponse(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshTokenResponse, error)

	// GetMeAvatarWithResponse request
	GetMeAvatarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeAvatarResponse, error)

	// GetMeProfileWithResponse request
	GetMeProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeProfileResponse, error)

	// UpdateMeProfileWithBodyWithResponse request with any body
	UpdateMeProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMeProfileResponse, error)

	UpdateMeProfileWithResponse(ctx context.Context, body UpdateMeProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMeProfileResponse, error)

	// CheckUsernameAvailableWithBodyWithResponse request with any body
	CheckUsernameAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckUsernameAvailableResponse, error)

	CheckUsernameAvailableWithResponse(ctx context.Context, body CheckUsernameAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckUsernameAvailableResponse, error)
}

type SendOtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// IsNewUser Indicates if this is a new user registration
			IsNewUser *bool `json:"isNewUser,omitempty"`
		} `json:"data,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	ApplicationproblemJSON400 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	ApplicationproblemJSON500 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
}

// Status returns HTTPResponse.Status
func (r SendOtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendOtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyOtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// AccessToken Access token for the user
			AccessToken *string `json:"accessToken,omitempty"`

			// RefreshToken Refresh token for the user
			RefreshToken *string `json:"refreshToken,omitempty"`
		} `json:"data,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	ApplicationproblemJSON400 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	ApplicationproblemJSON500 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
}

// Status returns HTTPResponse.Status
func (r VerifyOtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyOtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AccessToken Access token for the user
		AccessToken *string `json:"accessToken,omitempty"`

		// Data Data returned by the API call
		Data *map[string]interface{} `json:"data"`

		// Message Message from the API call
		Message *string `json:"message"`

		// RefreshToken Refresh token for the user
		RefreshToken *string `json:"refreshToken,omitempty"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	ApplicationproblemJSON400 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	ApplicationproblemJSON401 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	ApplicationproblemJSON500 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
}

// Status returns HTTPResponse.Status
func (r RefreshTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Data returned by the API call
		Data *map[string]interface{} `json:"data"`

		// ExpiresIn Expires in seconds
		ExpiresIn *int `json:"expiresIn,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// SignedUrl Signed URL for avatar
		SignedUrl *string `json:"signedUrl,omitempty"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	ApplicationproblemJSON401 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	ApplicationproblemJSON404 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	ApplicationproblemJSON500 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMeAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Data returned by the API call
		Data *map[string]interface{} `json:"data"`

		// DisplayName Display name of the user
		DisplayName *string `json:"displayName"`

		// Message Message from the API call
		Message *string `json:"message"`

		// PrivacyLevel Privacy level of the user, public, private, full_private
		PrivacyLevel *string `json:"privacyLevel,omitempty"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Username Username of the user
		Username *string `json:"username,omitempty"`
	}
	JSON401 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	JSON500 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMeProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMeProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Data returned by the API call
		Data *map[string]interface{} `json:"data"`

		// DisplayName Display name of the user
		DisplayName *string `json:"displayName"`

		// Message Message from the API call
		Message *string `json:"message"`

		// PrivacyLevel Privacy level of the user, public, private, full_private
		PrivacyLevel *string `json:"privacyLevel,omitempty"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Username Username of the user
		Username *string `json:"username,omitempty"`
	}
	ApplicationproblemJSON400 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	ApplicationproblemJSON401 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	ApplicationproblemJSON500 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateMeProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMeProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckUsernameAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Data returned by the API call
		Data *map[string]interface{} `json:"data"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	ApplicationproblemJSON401 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	ApplicationproblemJSON422 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
	ApplicationproblemJSON500 *struct {
		// Description Detail of the error
		Description *string `json:"description"`

		// Location Location of the error
		Location *[]struct {
			Error *string `json:"error,omitempty"`
			Path  *string `json:"path,omitempty"`
		} `json:"location,omitempty"`

		// Message Message from the API call
		Message *string `json:"message"`

		// Success Success status of the API call
		Success *bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`

		// Title Title of the error
		Title *string `json:"title"`
	}
}

// Status returns HTTPResponse.Status
func (r CheckUsernameAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckUsernameAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SendOtpWithBodyWithResponse request with arbitrary body returning *SendOtpResponse
func (c *ClientWithResponses) SendOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendOtpResponse, error) {
	rsp, err := c.SendOtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendOtpResponse(rsp)
}

func (c *ClientWithResponses) SendOtpWithResponse(ctx context.Context, body SendOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*SendOtpResponse, error) {
	rsp, err := c.SendOtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendOtpResponse(rsp)
}

// VerifyOtpWithBodyWithResponse request with arbitrary body returning *VerifyOtpResponse
func (c *ClientWithResponses) VerifyOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyOtpResponse, error) {
	rsp, err := c.VerifyOtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyOtpResponse(rsp)
}

func (c *ClientWithResponses) VerifyOtpWithResponse(ctx context.Context, body VerifyOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyOtpResponse, error) {
	rsp, err := c.VerifyOtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyOtpResponse(rsp)
}

// RefreshTokenWithBodyWithResponse request with arbitrary body returning *RefreshTokenResponse
func (c *ClientWithResponses) RefreshTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshTokenResponse, error) {
	rsp, err := c.RefreshTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshTokenResponse(rsp)
}

func (c *ClientWithResponses) RefreshTokenWithResponse(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshTokenResponse, error) {
	rsp, err := c.RefreshToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshTokenResponse(rsp)
}

// GetMeAvatarWithResponse request returning *GetMeAvatarResponse
func (c *ClientWithResponses) GetMeAvatarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeAvatarResponse, error) {
	rsp, err := c.GetMeAvatar(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeAvatarResponse(rsp)
}

// GetMeProfileWithResponse request returning *GetMeProfileResponse
func (c *ClientWithResponses) GetMeProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeProfileResponse, error) {
	rsp, err := c.GetMeProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeProfileResponse(rsp)
}

// UpdateMeProfileWithBodyWithResponse request with arbitrary body returning *UpdateMeProfileResponse
func (c *ClientWithResponses) UpdateMeProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMeProfileResponse, error) {
	rsp, err := c.UpdateMeProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMeProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateMeProfileWithResponse(ctx context.Context, body UpdateMeProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMeProfileResponse, error) {
	rsp, err := c.UpdateMeProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMeProfileResponse(rsp)
}

// CheckUsernameAvailableWithBodyWithResponse request with arbitrary body returning *CheckUsernameAvailableResponse
func (c *ClientWithResponses) CheckUsernameAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckUsernameAvailableResponse, error) {
	rsp, err := c.CheckUsernameAvailableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckUsernameAvailableResponse(rsp)
}

func (c *ClientWithResponses) CheckUsernameAvailableWithResponse(ctx context.Context, body CheckUsernameAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckUsernameAvailableResponse, error) {
	rsp, err := c.CheckUsernameAvailable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckUsernameAvailableResponse(rsp)
}

// ParseSendOtpResponse parses an HTTP response from a SendOtpWithResponse call
func ParseSendOtpResponse(rsp *http.Response) (*SendOtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendOtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// IsNewUser Indicates if this is a new user registration
				IsNewUser *bool `json:"isNewUser,omitempty"`
			} `json:"data,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseVerifyOtpResponse parses an HTTP response from a VerifyOtpWithResponse call
func ParseVerifyOtpResponse(rsp *http.Response) (*VerifyOtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyOtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// AccessToken Access token for the user
				AccessToken *string `json:"accessToken,omitempty"`

				// RefreshToken Refresh token for the user
				RefreshToken *string `json:"refreshToken,omitempty"`
			} `json:"data,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseRefreshTokenResponse parses an HTTP response from a RefreshTokenWithResponse call
func ParseRefreshTokenResponse(rsp *http.Response) (*RefreshTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AccessToken Access token for the user
			AccessToken *string `json:"accessToken,omitempty"`

			// Data Data returned by the API call
			Data *map[string]interface{} `json:"data"`

			// Message Message from the API call
			Message *string `json:"message"`

			// RefreshToken Refresh token for the user
			RefreshToken *string `json:"refreshToken,omitempty"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetMeAvatarResponse parses an HTTP response from a GetMeAvatarWithResponse call
func ParseGetMeAvatarResponse(rsp *http.Response) (*GetMeAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Data returned by the API call
			Data *map[string]interface{} `json:"data"`

			// ExpiresIn Expires in seconds
			ExpiresIn *int `json:"expiresIn,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// SignedUrl Signed URL for avatar
			SignedUrl *string `json:"signedUrl,omitempty"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetMeProfileResponse parses an HTTP response from a GetMeProfileWithResponse call
func ParseGetMeProfileResponse(rsp *http.Response) (*GetMeProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Data returned by the API call
			Data *map[string]interface{} `json:"data"`

			// DisplayName Display name of the user
			DisplayName *string `json:"displayName"`

			// Message Message from the API call
			Message *string `json:"message"`

			// PrivacyLevel Privacy level of the user, public, private, full_private
			PrivacyLevel *string `json:"privacyLevel,omitempty"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Username Username of the user
			Username *string `json:"username,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateMeProfileResponse parses an HTTP response from a UpdateMeProfileWithResponse call
func ParseUpdateMeProfileResponse(rsp *http.Response) (*UpdateMeProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMeProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Data returned by the API call
			Data *map[string]interface{} `json:"data"`

			// DisplayName Display name of the user
			DisplayName *string `json:"displayName"`

			// Message Message from the API call
			Message *string `json:"message"`

			// PrivacyLevel Privacy level of the user, public, private, full_private
			PrivacyLevel *string `json:"privacyLevel,omitempty"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Username Username of the user
			Username *string `json:"username,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCheckUsernameAvailableResponse parses an HTTP response from a CheckUsernameAvailableWithResponse call
func ParseCheckUsernameAvailableResponse(rsp *http.Response) (*CheckUsernameAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckUsernameAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Data returned by the API call
			Data *map[string]interface{} `json:"data"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Description Detail of the error
			Description *string `json:"description"`

			// Location Location of the error
			Location *[]struct {
				Error *string `json:"error,omitempty"`
				Path  *string `json:"path,omitempty"`
			} `json:"location,omitempty"`

			// Message Message from the API call
			Message *string `json:"message"`

			// Success Success status of the API call
			Success *bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`

			// Title Title of the error
			Title *string `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send OTP code to email for existing users or create new user account
	// (POST /auth/otp)
	SendOtp(w http.ResponseWriter, r *http.Request)
	// Verify OTP code
	// (POST /auth/otp-verify)
	VerifyOtp(w http.ResponseWriter, r *http.Request)
	// Refresh access token
	// (POST /auth/refresh-token)
	RefreshToken(w http.ResponseWriter, r *http.Request)
	// Get signed URL for avatar
	// (GET /me/avatar)
	GetMeAvatar(w http.ResponseWriter, r *http.Request)
	// Get user information
	// (GET /me/profile)
	GetMeProfile(w http.ResponseWriter, r *http.Request)
	// Update user profile
	// (POST /me/update-profile)
	UpdateMeProfile(w http.ResponseWriter, r *http.Request)
	// Check if username is available
	// (POST /user/username-available)
	CheckUsernameAvailable(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// SendOtp operation middleware
func (siw *ServerInterfaceWrapper) SendOtp(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SendOtp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// VerifyOtp operation middleware
func (siw *ServerInterfaceWrapper) VerifyOtp(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyOtp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMeAvatar operation middleware
func (siw *ServerInterfaceWrapper) GetMeAvatar(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeAvatar(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMeProfile operation middleware
func (siw *ServerInterfaceWrapper) GetMeProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMeProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateMeProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMeProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CheckUsernameAvailable operation middleware
func (siw *ServerInterfaceWrapper) CheckUsernameAvailable(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckUsernameAvailable(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/auth/otp", wrapper.SendOtp)
	m.HandleFunc("POST "+options.BaseURL+"/auth/otp-verify", wrapper.VerifyOtp)
	m.HandleFunc("POST "+options.BaseURL+"/auth/refresh-token", wrapper.RefreshToken)
	m.HandleFunc("GET "+options.BaseURL+"/me/avatar", wrapper.GetMeAvatar)
	m.HandleFunc("GET "+options.BaseURL+"/me/profile", wrapper.GetMeProfile)
	m.HandleFunc("POST "+options.BaseURL+"/me/update-profile", wrapper.UpdateMeProfile)
	m.HandleFunc("POST "+options.BaseURL+"/user/username-available", wrapper.CheckUsernameAvailable)

	return m
}

type SendOtpRequestObject struct {
	Body *SendOtpJSONRequestBody
}

type SendOtpResponseObject interface {
	VisitSendOtpResponse(w http.ResponseWriter) error
}

type SendOtp200JSONResponse struct {
	Data *struct {
		// IsNewUser Indicates if this is a new user registration
		IsNewUser *bool `json:"isNewUser,omitempty"`
	} `json:"data,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response SendOtp200JSONResponse) VisitSendOtpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SendOtp400ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response SendOtp400ApplicationProblemPlusJSONResponse) VisitSendOtpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SendOtp500ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response SendOtp500ApplicationProblemPlusJSONResponse) VisitSendOtpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type VerifyOtpRequestObject struct {
	Body *VerifyOtpJSONRequestBody
}

type VerifyOtpResponseObject interface {
	VisitVerifyOtpResponse(w http.ResponseWriter) error
}

type VerifyOtp200JSONResponse struct {
	Data *struct {
		// AccessToken Access token for the user
		AccessToken *string `json:"accessToken,omitempty"`

		// RefreshToken Refresh token for the user
		RefreshToken *string `json:"refreshToken,omitempty"`
	} `json:"data,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response VerifyOtp200JSONResponse) VisitVerifyOtpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type VerifyOtp400ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response VerifyOtp400ApplicationProblemPlusJSONResponse) VisitVerifyOtpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type VerifyOtp500ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response VerifyOtp500ApplicationProblemPlusJSONResponse) VisitVerifyOtpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RefreshTokenRequestObject struct {
	Body *RefreshTokenJSONRequestBody
}

type RefreshTokenResponseObject interface {
	VisitRefreshTokenResponse(w http.ResponseWriter) error
}

type RefreshToken200JSONResponse struct {
	// AccessToken Access token for the user
	AccessToken *string `json:"accessToken,omitempty"`

	// Data Data returned by the API call
	Data *map[string]interface{} `json:"data"`

	// Message Message from the API call
	Message *string `json:"message"`

	// RefreshToken Refresh token for the user
	RefreshToken *string `json:"refreshToken,omitempty"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response RefreshToken200JSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RefreshToken400ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response RefreshToken400ApplicationProblemPlusJSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RefreshToken401ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response RefreshToken401ApplicationProblemPlusJSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RefreshToken500ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response RefreshToken500ApplicationProblemPlusJSONResponse) VisitRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMeAvatarRequestObject struct {
}

type GetMeAvatarResponseObject interface {
	VisitGetMeAvatarResponse(w http.ResponseWriter) error
}

type GetMeAvatar200JSONResponse struct {
	// Data Data returned by the API call
	Data *map[string]interface{} `json:"data"`

	// ExpiresIn Expires in seconds
	ExpiresIn *int `json:"expiresIn,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// SignedUrl Signed URL for avatar
	SignedUrl *string `json:"signedUrl,omitempty"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response GetMeAvatar200JSONResponse) VisitGetMeAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMeAvatar401ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response GetMeAvatar401ApplicationProblemPlusJSONResponse) VisitGetMeAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMeAvatar404ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response GetMeAvatar404ApplicationProblemPlusJSONResponse) VisitGetMeAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMeAvatar500ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response GetMeAvatar500ApplicationProblemPlusJSONResponse) VisitGetMeAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMeProfileRequestObject struct {
}

type GetMeProfileResponseObject interface {
	VisitGetMeProfileResponse(w http.ResponseWriter) error
}

type GetMeProfile200JSONResponse struct {
	// Data Data returned by the API call
	Data *map[string]interface{} `json:"data"`

	// DisplayName Display name of the user
	DisplayName *string `json:"displayName"`

	// Message Message from the API call
	Message *string `json:"message"`

	// PrivacyLevel Privacy level of the user, public, private, full_private
	PrivacyLevel *string `json:"privacyLevel,omitempty"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Username Username of the user
	Username *string `json:"username,omitempty"`
}

func (response GetMeProfile200JSONResponse) VisitGetMeProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMeProfile401JSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response GetMeProfile401JSONResponse) VisitGetMeProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMeProfile500JSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response GetMeProfile500JSONResponse) VisitGetMeProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMeProfileRequestObject struct {
	Body *UpdateMeProfileJSONRequestBody
}

type UpdateMeProfileResponseObject interface {
	VisitUpdateMeProfileResponse(w http.ResponseWriter) error
}

type UpdateMeProfile200JSONResponse struct {
	// Data Data returned by the API call
	Data *map[string]interface{} `json:"data"`

	// DisplayName Display name of the user
	DisplayName *string `json:"displayName"`

	// Message Message from the API call
	Message *string `json:"message"`

	// PrivacyLevel Privacy level of the user, public, private, full_private
	PrivacyLevel *string `json:"privacyLevel,omitempty"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Username Username of the user
	Username *string `json:"username,omitempty"`
}

func (response UpdateMeProfile200JSONResponse) VisitUpdateMeProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMeProfile400ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response UpdateMeProfile400ApplicationProblemPlusJSONResponse) VisitUpdateMeProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMeProfile401ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response UpdateMeProfile401ApplicationProblemPlusJSONResponse) VisitUpdateMeProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMeProfile500ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response UpdateMeProfile500ApplicationProblemPlusJSONResponse) VisitUpdateMeProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CheckUsernameAvailableRequestObject struct {
	Body *CheckUsernameAvailableJSONRequestBody
}

type CheckUsernameAvailableResponseObject interface {
	VisitCheckUsernameAvailableResponse(w http.ResponseWriter) error
}

type CheckUsernameAvailable200JSONResponse struct {
	// Data Data returned by the API call
	Data *map[string]interface{} `json:"data"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response CheckUsernameAvailable200JSONResponse) VisitCheckUsernameAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CheckUsernameAvailable401ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response CheckUsernameAvailable401ApplicationProblemPlusJSONResponse) VisitCheckUsernameAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CheckUsernameAvailable422ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response CheckUsernameAvailable422ApplicationProblemPlusJSONResponse) VisitCheckUsernameAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CheckUsernameAvailable500ApplicationProblemPlusJSONResponse struct {
	// Description Detail of the error
	Description *string `json:"description"`

	// Location Location of the error
	Location *[]struct {
		Error *string `json:"error,omitempty"`
		Path  *string `json:"path,omitempty"`
	} `json:"location,omitempty"`

	// Message Message from the API call
	Message *string `json:"message"`

	// Success Success status of the API call
	Success *bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`

	// Title Title of the error
	Title *string `json:"title"`
}

func (response CheckUsernameAvailable500ApplicationProblemPlusJSONResponse) VisitCheckUsernameAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Send OTP code to email for existing users or create new user account
	// (POST /auth/otp)
	SendOtp(ctx context.Context, request SendOtpRequestObject) (SendOtpResponseObject, error)
	// Verify OTP code
	// (POST /auth/otp-verify)
	VerifyOtp(ctx context.Context, request VerifyOtpRequestObject) (VerifyOtpResponseObject, error)
	// Refresh access token
	// (POST /auth/refresh-token)
	RefreshToken(ctx context.Context, request RefreshTokenRequestObject) (RefreshTokenResponseObject, error)
	// Get signed URL for avatar
	// (GET /me/avatar)
	GetMeAvatar(ctx context.Context, request GetMeAvatarRequestObject) (GetMeAvatarResponseObject, error)
	// Get user information
	// (GET /me/profile)
	GetMeProfile(ctx context.Context, request GetMeProfileRequestObject) (GetMeProfileResponseObject, error)
	// Update user profile
	// (POST /me/update-profile)
	UpdateMeProfile(ctx context.Context, request UpdateMeProfileRequestObject) (UpdateMeProfileResponseObject, error)
	// Check if username is available
	// (POST /user/username-available)
	CheckUsernameAvailable(ctx context.Context, request CheckUsernameAvailableRequestObject) (CheckUsernameAvailableResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// SendOtp operation middleware
func (sh *strictHandler) SendOtp(w http.ResponseWriter, r *http.Request) {
	var request SendOtpRequestObject

	var body SendOtpJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SendOtp(ctx, request.(SendOtpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendOtp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SendOtpResponseObject); ok {
		if err := validResponse.VisitSendOtpResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyOtp operation middleware
func (sh *strictHandler) VerifyOtp(w http.ResponseWriter, r *http.Request) {
	var request VerifyOtpRequestObject

	var body VerifyOtpJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyOtp(ctx, request.(VerifyOtpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyOtp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(VerifyOtpResponseObject); ok {
		if err := validResponse.VisitVerifyOtpResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RefreshToken operation middleware
func (sh *strictHandler) RefreshToken(w http.ResponseWriter, r *http.Request) {
	var request RefreshTokenRequestObject

	var body RefreshTokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RefreshToken(ctx, request.(RefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RefreshToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RefreshTokenResponseObject); ok {
		if err := validResponse.VisitRefreshTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMeAvatar operation middleware
func (sh *strictHandler) GetMeAvatar(w http.ResponseWriter, r *http.Request) {
	var request GetMeAvatarRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMeAvatar(ctx, request.(GetMeAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMeAvatar")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMeAvatarResponseObject); ok {
		if err := validResponse.VisitGetMeAvatarResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMeProfile operation middleware
func (sh *strictHandler) GetMeProfile(w http.ResponseWriter, r *http.Request) {
	var request GetMeProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMeProfile(ctx, request.(GetMeProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMeProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMeProfileResponseObject); ok {
		if err := validResponse.VisitGetMeProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMeProfile operation middleware
func (sh *strictHandler) UpdateMeProfile(w http.ResponseWriter, r *http.Request) {
	var request UpdateMeProfileRequestObject

	var body UpdateMeProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMeProfile(ctx, request.(UpdateMeProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMeProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateMeProfileResponseObject); ok {
		if err := validResponse.VisitUpdateMeProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CheckUsernameAvailable operation middleware
func (sh *strictHandler) CheckUsernameAvailable(w http.ResponseWriter, r *http.Request) {
	var request CheckUsernameAvailableRequestObject

	var body CheckUsernameAvailableJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CheckUsernameAvailable(ctx, request.(CheckUsernameAvailableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CheckUsernameAvailable")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CheckUsernameAvailableResponseObject); ok {
		if err := validResponse.VisitCheckUsernameAvailableResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
