//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PostMeUpdateProfileJSONBodyPrivacyLevel.
const (
	FullPrivate PostMeUpdateProfileJSONBodyPrivacyLevel = "full_private"
	Private     PostMeUpdateProfileJSONBodyPrivacyLevel = "private"
	Public      PostMeUpdateProfileJSONBodyPrivacyLevel = "public"
)

// PostAuthOtpJSONBody defines parameters for PostAuthOtp.
type PostAuthOtpJSONBody struct {
	// Email Email address of the user
	Email string `json:"email"`
}

// PostAuthOtpVerifyJSONBody defines parameters for PostAuthOtpVerify.
type PostAuthOtpVerifyJSONBody struct {
	// Email Email address of the user
	Email string `json:"email"`

	// OtpCode OTP code received via email
	OtpCode string `json:"otpCode"`
}

// PostAuthRefreshTokenJSONBody defines parameters for PostAuthRefreshToken.
type PostAuthRefreshTokenJSONBody struct {
	// RefreshToken Refresh token for the user
	RefreshToken string `json:"refreshToken"`
}

// PostMeUpdateProfileJSONBody defines parameters for PostMeUpdateProfile.
type PostMeUpdateProfileJSONBody struct {
	// DisplayName Display name of the user
	DisplayName *string `json:"displayName"`

	// PrivacyLevel Privacy level of the user, public, private, full_private
	PrivacyLevel *PostMeUpdateProfileJSONBodyPrivacyLevel `json:"privacyLevel"`

	// Username Username of the user
	Username *string `json:"username"`
}

// PostMeUpdateProfileJSONBodyPrivacyLevel defines parameters for PostMeUpdateProfile.
type PostMeUpdateProfileJSONBodyPrivacyLevel string

// PostUserUsernameAvailableJSONBody defines parameters for PostUserUsernameAvailable.
type PostUserUsernameAvailableJSONBody struct {
	// Username Username to check
	Username *string `json:"username,omitempty"`
}

// PostAuthOtpJSONRequestBody defines body for PostAuthOtp for application/json ContentType.
type PostAuthOtpJSONRequestBody PostAuthOtpJSONBody

// PostAuthOtpVerifyJSONRequestBody defines body for PostAuthOtpVerify for application/json ContentType.
type PostAuthOtpVerifyJSONRequestBody PostAuthOtpVerifyJSONBody

// PostAuthRefreshTokenJSONRequestBody defines body for PostAuthRefreshToken for application/json ContentType.
type PostAuthRefreshTokenJSONRequestBody PostAuthRefreshTokenJSONBody

// PostMeUpdateProfileJSONRequestBody defines body for PostMeUpdateProfile for application/json ContentType.
type PostMeUpdateProfileJSONRequestBody PostMeUpdateProfileJSONBody

// PostUserUsernameAvailableJSONRequestBody defines body for PostUserUsernameAvailable for application/json ContentType.
type PostUserUsernameAvailableJSONRequestBody PostUserUsernameAvailableJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuthOtpWithBody request with any body
	PostAuthOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthOtp(ctx context.Context, body PostAuthOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthOtpVerifyWithBody request with any body
	PostAuthOtpVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthOtpVerify(ctx context.Context, body PostAuthOtpVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthRefreshTokenWithBody request with any body
	PostAuthRefreshTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthRefreshToken(ctx context.Context, body PostAuthRefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeAvatar request
	GetMeAvatar(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeProfile request
	GetMeProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMeUpdateProfileWithBody request with any body
	PostMeUpdateProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMeUpdateProfile(ctx context.Context, body PostMeUpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUsernameAvailableWithBody request with any body
	PostUserUsernameAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUsernameAvailable(ctx context.Context, body PostUserUsernameAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuthOtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthOtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthOtp(ctx context.Context, body PostAuthOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthOtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthOtpVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthOtpVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthOtpVerify(ctx context.Context, body PostAuthOtpVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthOtpVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRefreshTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRefreshTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRefreshToken(ctx context.Context, body PostAuthRefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRefreshTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeAvatar(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeAvatarRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMeUpdateProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMeUpdateProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMeUpdateProfile(ctx context.Context, body PostMeUpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMeUpdateProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUsernameAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUsernameAvailableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUsernameAvailable(ctx context.Context, body PostUserUsernameAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUsernameAvailableRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuthOtpRequest calls the generic PostAuthOtp builder with application/json body
func NewPostAuthOtpRequest(server string, body PostAuthOtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthOtpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthOtpRequestWithBody generates requests for PostAuthOtp with any type of body
func NewPostAuthOtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/otp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthOtpVerifyRequest calls the generic PostAuthOtpVerify builder with application/json body
func NewPostAuthOtpVerifyRequest(server string, body PostAuthOtpVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthOtpVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthOtpVerifyRequestWithBody generates requests for PostAuthOtpVerify with any type of body
func NewPostAuthOtpVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/otp-verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthRefreshTokenRequest calls the generic PostAuthRefreshToken builder with application/json body
func NewPostAuthRefreshTokenRequest(server string, body PostAuthRefreshTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthRefreshTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthRefreshTokenRequestWithBody generates requests for PostAuthRefreshToken with any type of body
func NewPostAuthRefreshTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/refresh-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeAvatarRequest generates requests for GetMeAvatar
func NewGetMeAvatarRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeProfileRequest generates requests for GetMeProfile
func NewGetMeProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMeUpdateProfileRequest calls the generic PostMeUpdateProfile builder with application/json body
func NewPostMeUpdateProfileRequest(server string, body PostMeUpdateProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMeUpdateProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMeUpdateProfileRequestWithBody generates requests for PostMeUpdateProfile with any type of body
func NewPostMeUpdateProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/update-profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserUsernameAvailableRequest calls the generic PostUserUsernameAvailable builder with application/json body
func NewPostUserUsernameAvailableRequest(server string, body PostUserUsernameAvailableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUsernameAvailableRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserUsernameAvailableRequestWithBody generates requests for PostUserUsernameAvailable with any type of body
func NewPostUserUsernameAvailableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/username-available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuthOtpWithBodyWithResponse request with any body
	PostAuthOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthOtpResponse, error)

	PostAuthOtpWithResponse(ctx context.Context, body PostAuthOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthOtpResponse, error)

	// PostAuthOtpVerifyWithBodyWithResponse request with any body
	PostAuthOtpVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthOtpVerifyResponse, error)

	PostAuthOtpVerifyWithResponse(ctx context.Context, body PostAuthOtpVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthOtpVerifyResponse, error)

	// PostAuthRefreshTokenWithBodyWithResponse request with any body
	PostAuthRefreshTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRefreshTokenResponse, error)

	PostAuthRefreshTokenWithResponse(ctx context.Context, body PostAuthRefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRefreshTokenResponse, error)

	// GetMeAvatarWithResponse request
	GetMeAvatarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeAvatarResponse, error)

	// GetMeProfileWithResponse request
	GetMeProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeProfileResponse, error)

	// PostMeUpdateProfileWithBodyWithResponse request with any body
	PostMeUpdateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMeUpdateProfileResponse, error)

	PostMeUpdateProfileWithResponse(ctx context.Context, body PostMeUpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMeUpdateProfileResponse, error)

	// PostUserUsernameAvailableWithBodyWithResponse request with any body
	PostUserUsernameAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUsernameAvailableResponse, error)

	PostUserUsernameAvailableWithResponse(ctx context.Context, body PostUserUsernameAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUsernameAvailableResponse, error)
}

type PostAuthOtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// IsNewUser Indicates if this is a new user registration
			IsNewUser *bool `json:"isNewUser,omitempty"`
		} `json:"data,omitempty"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
	JSON400 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
	JSON500 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAuthOtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthOtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthOtpVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			// AccessToken Access token for the user
			AccessToken *string `json:"accessToken,omitempty"`

			// RefreshToken Refresh token for the user
			RefreshToken *string `json:"refreshToken,omitempty"`
		} `json:"data,omitempty"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
	JSON400 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
	JSON500 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAuthOtpVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthOtpVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthRefreshTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AccessToken Access token for the user
		AccessToken *string `json:"accessToken,omitempty"`

		// Data Data returned by the API call
		Data *map[string]interface{} `json:"data,omitempty"`

		// Message Message from the API call
		Message string `json:"message"`

		// RefreshToken Refresh token for the user
		RefreshToken *string `json:"refreshToken,omitempty"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
	JSON400 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
	JSON401 *struct {
		// Message Message from the API call
		Message *string `json:"message"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	JSON500 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
}

// Status returns HTTPResponse.Status
func (r PostAuthRefreshTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthRefreshTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Data returned by the API call
		Data *map[string]interface{} `json:"data,omitempty"`

		// ExpiresIn Expires in seconds
		ExpiresIn *int `json:"expiresIn,omitempty"`

		// Message Message from the API call
		Message string `json:"message"`

		// SignedUrl Signed URL for avatar
		SignedUrl *string `json:"signedUrl,omitempty"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
	JSON401 *struct {
		// Message Message from the API call
		Message *string `json:"message"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	JSON404 *struct {
		// Message Message from the API call
		Message *string `json:"message"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	JSON500 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMeAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Data returned by the API call
		Data *map[string]interface{} `json:"data,omitempty"`

		// DisplayName Display name of the user
		DisplayName *string `json:"displayName"`

		// Message Message from the API call
		Message string `json:"message"`

		// PrivacyLevel Privacy level of the user, public, private, full_private
		PrivacyLevel *string `json:"privacyLevel,omitempty"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`

		// Username Username of the user
		Username *string `json:"username,omitempty"`
	}
	JSON401 *struct {
		// Message Message from the API call
		Message *string `json:"message"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	JSON500 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMeProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMeUpdateProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Data returned by the API call
		Data *map[string]interface{} `json:"data,omitempty"`

		// DisplayName Display name of the user
		DisplayName *string `json:"displayName"`

		// Message Message from the API call
		Message string `json:"message"`

		// PrivacyLevel Privacy level of the user, public, private, full_private
		PrivacyLevel *string `json:"privacyLevel,omitempty"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`

		// Username Username of the user
		Username *string `json:"username,omitempty"`
	}
	JSON400 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
	JSON401 *struct {
		// Message Message from the API call
		Message *string `json:"message"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	JSON500 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
}

// Status returns HTTPResponse.Status
func (r PostMeUpdateProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMeUpdateProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUsernameAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Data Data returned by the API call
		Data *map[string]interface{} `json:"data,omitempty"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
	JSON401 *struct {
		// Message Message from the API call
		Message *string `json:"message"`

		// Timestamp Timestamp of the response
		Timestamp *string `json:"timestamp"`
	}
	JSON422 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
	JSON500 *struct {
		// ErrorCode Error code
		ErrorCode string `json:"errorCode"`

		// Message Message from the API call
		Message string `json:"message"`

		// Success Success status of the API call
		Success bool `json:"success"`

		// Timestamp Timestamp of the response
		Timestamp string `json:"timestamp"`
	}
}

// Status returns HTTPResponse.Status
func (r PostUserUsernameAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUsernameAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuthOtpWithBodyWithResponse request with arbitrary body returning *PostAuthOtpResponse
func (c *ClientWithResponses) PostAuthOtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthOtpResponse, error) {
	rsp, err := c.PostAuthOtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthOtpResponse(rsp)
}

func (c *ClientWithResponses) PostAuthOtpWithResponse(ctx context.Context, body PostAuthOtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthOtpResponse, error) {
	rsp, err := c.PostAuthOtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthOtpResponse(rsp)
}

// PostAuthOtpVerifyWithBodyWithResponse request with arbitrary body returning *PostAuthOtpVerifyResponse
func (c *ClientWithResponses) PostAuthOtpVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthOtpVerifyResponse, error) {
	rsp, err := c.PostAuthOtpVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthOtpVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostAuthOtpVerifyWithResponse(ctx context.Context, body PostAuthOtpVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthOtpVerifyResponse, error) {
	rsp, err := c.PostAuthOtpVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthOtpVerifyResponse(rsp)
}

// PostAuthRefreshTokenWithBodyWithResponse request with arbitrary body returning *PostAuthRefreshTokenResponse
func (c *ClientWithResponses) PostAuthRefreshTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRefreshTokenResponse, error) {
	rsp, err := c.PostAuthRefreshTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRefreshTokenResponse(rsp)
}

func (c *ClientWithResponses) PostAuthRefreshTokenWithResponse(ctx context.Context, body PostAuthRefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRefreshTokenResponse, error) {
	rsp, err := c.PostAuthRefreshToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRefreshTokenResponse(rsp)
}

// GetMeAvatarWithResponse request returning *GetMeAvatarResponse
func (c *ClientWithResponses) GetMeAvatarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeAvatarResponse, error) {
	rsp, err := c.GetMeAvatar(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeAvatarResponse(rsp)
}

// GetMeProfileWithResponse request returning *GetMeProfileResponse
func (c *ClientWithResponses) GetMeProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeProfileResponse, error) {
	rsp, err := c.GetMeProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeProfileResponse(rsp)
}

// PostMeUpdateProfileWithBodyWithResponse request with arbitrary body returning *PostMeUpdateProfileResponse
func (c *ClientWithResponses) PostMeUpdateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMeUpdateProfileResponse, error) {
	rsp, err := c.PostMeUpdateProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMeUpdateProfileResponse(rsp)
}

func (c *ClientWithResponses) PostMeUpdateProfileWithResponse(ctx context.Context, body PostMeUpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMeUpdateProfileResponse, error) {
	rsp, err := c.PostMeUpdateProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMeUpdateProfileResponse(rsp)
}

// PostUserUsernameAvailableWithBodyWithResponse request with arbitrary body returning *PostUserUsernameAvailableResponse
func (c *ClientWithResponses) PostUserUsernameAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUsernameAvailableResponse, error) {
	rsp, err := c.PostUserUsernameAvailableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUsernameAvailableResponse(rsp)
}

func (c *ClientWithResponses) PostUserUsernameAvailableWithResponse(ctx context.Context, body PostUserUsernameAvailableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUsernameAvailableResponse, error) {
	rsp, err := c.PostUserUsernameAvailable(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUsernameAvailableResponse(rsp)
}

// ParsePostAuthOtpResponse parses an HTTP response from a PostAuthOtpWithResponse call
func ParsePostAuthOtpResponse(rsp *http.Response) (*PostAuthOtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthOtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// IsNewUser Indicates if this is a new user registration
				IsNewUser *bool `json:"isNewUser,omitempty"`
			} `json:"data,omitempty"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthOtpVerifyResponse parses an HTTP response from a PostAuthOtpVerifyWithResponse call
func ParsePostAuthOtpVerifyResponse(rsp *http.Response) (*PostAuthOtpVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthOtpVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				// AccessToken Access token for the user
				AccessToken *string `json:"accessToken,omitempty"`

				// RefreshToken Refresh token for the user
				RefreshToken *string `json:"refreshToken,omitempty"`
			} `json:"data,omitempty"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthRefreshTokenResponse parses an HTTP response from a PostAuthRefreshTokenWithResponse call
func ParsePostAuthRefreshTokenResponse(rsp *http.Response) (*PostAuthRefreshTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthRefreshTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AccessToken Access token for the user
			AccessToken *string `json:"accessToken,omitempty"`

			// Data Data returned by the API call
			Data *map[string]interface{} `json:"data,omitempty"`

			// Message Message from the API call
			Message string `json:"message"`

			// RefreshToken Refresh token for the user
			RefreshToken *string `json:"refreshToken,omitempty"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Message Message from the API call
			Message *string `json:"message"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMeAvatarResponse parses an HTTP response from a GetMeAvatarWithResponse call
func ParseGetMeAvatarResponse(rsp *http.Response) (*GetMeAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Data returned by the API call
			Data *map[string]interface{} `json:"data,omitempty"`

			// ExpiresIn Expires in seconds
			ExpiresIn *int `json:"expiresIn,omitempty"`

			// Message Message from the API call
			Message string `json:"message"`

			// SignedUrl Signed URL for avatar
			SignedUrl *string `json:"signedUrl,omitempty"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Message Message from the API call
			Message *string `json:"message"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Message Message from the API call
			Message *string `json:"message"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMeProfileResponse parses an HTTP response from a GetMeProfileWithResponse call
func ParseGetMeProfileResponse(rsp *http.Response) (*GetMeProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Data returned by the API call
			Data *map[string]interface{} `json:"data,omitempty"`

			// DisplayName Display name of the user
			DisplayName *string `json:"displayName"`

			// Message Message from the API call
			Message string `json:"message"`

			// PrivacyLevel Privacy level of the user, public, private, full_private
			PrivacyLevel *string `json:"privacyLevel,omitempty"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`

			// Username Username of the user
			Username *string `json:"username,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Message Message from the API call
			Message *string `json:"message"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostMeUpdateProfileResponse parses an HTTP response from a PostMeUpdateProfileWithResponse call
func ParsePostMeUpdateProfileResponse(rsp *http.Response) (*PostMeUpdateProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMeUpdateProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Data returned by the API call
			Data *map[string]interface{} `json:"data,omitempty"`

			// DisplayName Display name of the user
			DisplayName *string `json:"displayName"`

			// Message Message from the API call
			Message string `json:"message"`

			// PrivacyLevel Privacy level of the user, public, private, full_private
			PrivacyLevel *string `json:"privacyLevel,omitempty"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`

			// Username Username of the user
			Username *string `json:"username,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Message Message from the API call
			Message *string `json:"message"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUserUsernameAvailableResponse parses an HTTP response from a PostUserUsernameAvailableWithResponse call
func ParsePostUserUsernameAvailableResponse(rsp *http.Response) (*PostUserUsernameAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUsernameAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Data Data returned by the API call
			Data *map[string]interface{} `json:"data,omitempty"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// Message Message from the API call
			Message *string `json:"message"`

			// Timestamp Timestamp of the response
			Timestamp *string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// ErrorCode Error code
			ErrorCode string `json:"errorCode"`

			// Message Message from the API call
			Message string `json:"message"`

			// Success Success status of the API call
			Success bool `json:"success"`

			// Timestamp Timestamp of the response
			Timestamp string `json:"timestamp"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Send OTP code to email for existing users or create new user account
	// (POST /auth/otp)
	PostAuthOtp(w http.ResponseWriter, r *http.Request)
	// Verify OTP code
	// (POST /auth/otp-verify)
	PostAuthOtpVerify(w http.ResponseWriter, r *http.Request)
	// Refresh access token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(w http.ResponseWriter, r *http.Request)
	// Get signed URL for avatar
	// (GET /me/avatar)
	GetMeAvatar(w http.ResponseWriter, r *http.Request)
	// Get user information
	// (GET /me/profile)
	GetMeProfile(w http.ResponseWriter, r *http.Request)
	// Update user profile
	// (POST /me/update-profile)
	PostMeUpdateProfile(w http.ResponseWriter, r *http.Request)
	// Check if username is available
	// (POST /user/username-available)
	PostUserUsernameAvailable(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthOtp operation middleware
func (siw *ServerInterfaceWrapper) PostAuthOtp(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthOtp(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthOtpVerify operation middleware
func (siw *ServerInterfaceWrapper) PostAuthOtpVerify(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthOtpVerify(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthRefreshToken operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRefreshToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthRefreshToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMeAvatar operation middleware
func (siw *ServerInterfaceWrapper) GetMeAvatar(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeAvatar(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMeProfile operation middleware
func (siw *ServerInterfaceWrapper) GetMeProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostMeUpdateProfile operation middleware
func (siw *ServerInterfaceWrapper) PostMeUpdateProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMeUpdateProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserUsernameAvailable operation middleware
func (siw *ServerInterfaceWrapper) PostUserUsernameAvailable(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserUsernameAvailable(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/auth/otp", wrapper.PostAuthOtp)
	m.HandleFunc("POST "+options.BaseURL+"/auth/otp-verify", wrapper.PostAuthOtpVerify)
	m.HandleFunc("POST "+options.BaseURL+"/auth/refresh-token", wrapper.PostAuthRefreshToken)
	m.HandleFunc("GET "+options.BaseURL+"/me/avatar", wrapper.GetMeAvatar)
	m.HandleFunc("GET "+options.BaseURL+"/me/profile", wrapper.GetMeProfile)
	m.HandleFunc("POST "+options.BaseURL+"/me/update-profile", wrapper.PostMeUpdateProfile)
	m.HandleFunc("POST "+options.BaseURL+"/user/username-available", wrapper.PostUserUsernameAvailable)

	return m
}

type PostAuthOtpRequestObject struct {
	Body *PostAuthOtpJSONRequestBody
}

type PostAuthOtpResponseObject interface {
	VisitPostAuthOtpResponse(w http.ResponseWriter) error
}

type PostAuthOtp200JSONResponse struct {
	Data *struct {
		// IsNewUser Indicates if this is a new user registration
		IsNewUser *bool `json:"isNewUser,omitempty"`
	} `json:"data,omitempty"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostAuthOtp200JSONResponse) VisitPostAuthOtpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthOtp400JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostAuthOtp400JSONResponse) VisitPostAuthOtpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthOtp500JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostAuthOtp500JSONResponse) VisitPostAuthOtpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthOtpVerifyRequestObject struct {
	Body *PostAuthOtpVerifyJSONRequestBody
}

type PostAuthOtpVerifyResponseObject interface {
	VisitPostAuthOtpVerifyResponse(w http.ResponseWriter) error
}

type PostAuthOtpVerify200JSONResponse struct {
	Data *struct {
		// AccessToken Access token for the user
		AccessToken *string `json:"accessToken,omitempty"`

		// RefreshToken Refresh token for the user
		RefreshToken *string `json:"refreshToken,omitempty"`
	} `json:"data,omitempty"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostAuthOtpVerify200JSONResponse) VisitPostAuthOtpVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthOtpVerify400JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostAuthOtpVerify400JSONResponse) VisitPostAuthOtpVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthOtpVerify500JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostAuthOtpVerify500JSONResponse) VisitPostAuthOtpVerifyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshTokenRequestObject struct {
	Body *PostAuthRefreshTokenJSONRequestBody
}

type PostAuthRefreshTokenResponseObject interface {
	VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error
}

type PostAuthRefreshToken200JSONResponse struct {
	// AccessToken Access token for the user
	AccessToken *string `json:"accessToken,omitempty"`

	// Data Data returned by the API call
	Data *map[string]interface{} `json:"data,omitempty"`

	// Message Message from the API call
	Message string `json:"message"`

	// RefreshToken Refresh token for the user
	RefreshToken *string `json:"refreshToken,omitempty"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostAuthRefreshToken200JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshToken400JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostAuthRefreshToken400JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshToken401JSONResponse struct {
	// Message Message from the API call
	Message *string `json:"message"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response PostAuthRefreshToken401JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshToken500JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostAuthRefreshToken500JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMeAvatarRequestObject struct {
}

type GetMeAvatarResponseObject interface {
	VisitGetMeAvatarResponse(w http.ResponseWriter) error
}

type GetMeAvatar200JSONResponse struct {
	// Data Data returned by the API call
	Data *map[string]interface{} `json:"data,omitempty"`

	// ExpiresIn Expires in seconds
	ExpiresIn *int `json:"expiresIn,omitempty"`

	// Message Message from the API call
	Message string `json:"message"`

	// SignedUrl Signed URL for avatar
	SignedUrl *string `json:"signedUrl,omitempty"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response GetMeAvatar200JSONResponse) VisitGetMeAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMeAvatar401JSONResponse struct {
	// Message Message from the API call
	Message *string `json:"message"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response GetMeAvatar401JSONResponse) VisitGetMeAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMeAvatar404JSONResponse struct {
	// Message Message from the API call
	Message *string `json:"message"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response GetMeAvatar404JSONResponse) VisitGetMeAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMeAvatar500JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response GetMeAvatar500JSONResponse) VisitGetMeAvatarResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMeProfileRequestObject struct {
}

type GetMeProfileResponseObject interface {
	VisitGetMeProfileResponse(w http.ResponseWriter) error
}

type GetMeProfile200JSONResponse struct {
	// Data Data returned by the API call
	Data *map[string]interface{} `json:"data,omitempty"`

	// DisplayName Display name of the user
	DisplayName *string `json:"displayName"`

	// Message Message from the API call
	Message string `json:"message"`

	// PrivacyLevel Privacy level of the user, public, private, full_private
	PrivacyLevel *string `json:"privacyLevel,omitempty"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`

	// Username Username of the user
	Username *string `json:"username,omitempty"`
}

func (response GetMeProfile200JSONResponse) VisitGetMeProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMeProfile401JSONResponse struct {
	// Message Message from the API call
	Message *string `json:"message"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response GetMeProfile401JSONResponse) VisitGetMeProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMeProfile500JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response GetMeProfile500JSONResponse) VisitGetMeProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostMeUpdateProfileRequestObject struct {
	Body *PostMeUpdateProfileJSONRequestBody
}

type PostMeUpdateProfileResponseObject interface {
	VisitPostMeUpdateProfileResponse(w http.ResponseWriter) error
}

type PostMeUpdateProfile200JSONResponse struct {
	// Data Data returned by the API call
	Data *map[string]interface{} `json:"data,omitempty"`

	// DisplayName Display name of the user
	DisplayName *string `json:"displayName"`

	// Message Message from the API call
	Message string `json:"message"`

	// PrivacyLevel Privacy level of the user, public, private, full_private
	PrivacyLevel *string `json:"privacyLevel,omitempty"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`

	// Username Username of the user
	Username *string `json:"username,omitempty"`
}

func (response PostMeUpdateProfile200JSONResponse) VisitPostMeUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostMeUpdateProfile400JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostMeUpdateProfile400JSONResponse) VisitPostMeUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostMeUpdateProfile401JSONResponse struct {
	// Message Message from the API call
	Message *string `json:"message"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response PostMeUpdateProfile401JSONResponse) VisitPostMeUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostMeUpdateProfile500JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostMeUpdateProfile500JSONResponse) VisitPostMeUpdateProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUserUsernameAvailableRequestObject struct {
	Body *PostUserUsernameAvailableJSONRequestBody
}

type PostUserUsernameAvailableResponseObject interface {
	VisitPostUserUsernameAvailableResponse(w http.ResponseWriter) error
}

type PostUserUsernameAvailable200JSONResponse struct {
	// Data Data returned by the API call
	Data *map[string]interface{} `json:"data,omitempty"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostUserUsernameAvailable200JSONResponse) VisitPostUserUsernameAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserUsernameAvailable401JSONResponse struct {
	// Message Message from the API call
	Message *string `json:"message"`

	// Timestamp Timestamp of the response
	Timestamp *string `json:"timestamp"`
}

func (response PostUserUsernameAvailable401JSONResponse) VisitPostUserUsernameAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostUserUsernameAvailable422JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostUserUsernameAvailable422JSONResponse) VisitPostUserUsernameAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PostUserUsernameAvailable500JSONResponse struct {
	// ErrorCode Error code
	ErrorCode string `json:"errorCode"`

	// Message Message from the API call
	Message string `json:"message"`

	// Success Success status of the API call
	Success bool `json:"success"`

	// Timestamp Timestamp of the response
	Timestamp string `json:"timestamp"`
}

func (response PostUserUsernameAvailable500JSONResponse) VisitPostUserUsernameAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Send OTP code to email for existing users or create new user account
	// (POST /auth/otp)
	PostAuthOtp(ctx context.Context, request PostAuthOtpRequestObject) (PostAuthOtpResponseObject, error)
	// Verify OTP code
	// (POST /auth/otp-verify)
	PostAuthOtpVerify(ctx context.Context, request PostAuthOtpVerifyRequestObject) (PostAuthOtpVerifyResponseObject, error)
	// Refresh access token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx context.Context, request PostAuthRefreshTokenRequestObject) (PostAuthRefreshTokenResponseObject, error)
	// Get signed URL for avatar
	// (GET /me/avatar)
	GetMeAvatar(ctx context.Context, request GetMeAvatarRequestObject) (GetMeAvatarResponseObject, error)
	// Get user information
	// (GET /me/profile)
	GetMeProfile(ctx context.Context, request GetMeProfileRequestObject) (GetMeProfileResponseObject, error)
	// Update user profile
	// (POST /me/update-profile)
	PostMeUpdateProfile(ctx context.Context, request PostMeUpdateProfileRequestObject) (PostMeUpdateProfileResponseObject, error)
	// Check if username is available
	// (POST /user/username-available)
	PostUserUsernameAvailable(ctx context.Context, request PostUserUsernameAvailableRequestObject) (PostUserUsernameAvailableResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAuthOtp operation middleware
func (sh *strictHandler) PostAuthOtp(w http.ResponseWriter, r *http.Request) {
	var request PostAuthOtpRequestObject

	var body PostAuthOtpJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthOtp(ctx, request.(PostAuthOtpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthOtp")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAuthOtpResponseObject); ok {
		if err := validResponse.VisitPostAuthOtpResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthOtpVerify operation middleware
func (sh *strictHandler) PostAuthOtpVerify(w http.ResponseWriter, r *http.Request) {
	var request PostAuthOtpVerifyRequestObject

	var body PostAuthOtpVerifyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthOtpVerify(ctx, request.(PostAuthOtpVerifyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthOtpVerify")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAuthOtpVerifyResponseObject); ok {
		if err := validResponse.VisitPostAuthOtpVerifyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthRefreshToken operation middleware
func (sh *strictHandler) PostAuthRefreshToken(w http.ResponseWriter, r *http.Request) {
	var request PostAuthRefreshTokenRequestObject

	var body PostAuthRefreshTokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRefreshToken(ctx, request.(PostAuthRefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRefreshToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAuthRefreshTokenResponseObject); ok {
		if err := validResponse.VisitPostAuthRefreshTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMeAvatar operation middleware
func (sh *strictHandler) GetMeAvatar(w http.ResponseWriter, r *http.Request) {
	var request GetMeAvatarRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMeAvatar(ctx, request.(GetMeAvatarRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMeAvatar")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMeAvatarResponseObject); ok {
		if err := validResponse.VisitGetMeAvatarResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMeProfile operation middleware
func (sh *strictHandler) GetMeProfile(w http.ResponseWriter, r *http.Request) {
	var request GetMeProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMeProfile(ctx, request.(GetMeProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMeProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMeProfileResponseObject); ok {
		if err := validResponse.VisitGetMeProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostMeUpdateProfile operation middleware
func (sh *strictHandler) PostMeUpdateProfile(w http.ResponseWriter, r *http.Request) {
	var request PostMeUpdateProfileRequestObject

	var body PostMeUpdateProfileJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostMeUpdateProfile(ctx, request.(PostMeUpdateProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMeUpdateProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostMeUpdateProfileResponseObject); ok {
		if err := validResponse.VisitPostMeUpdateProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserUsernameAvailable operation middleware
func (sh *strictHandler) PostUserUsernameAvailable(w http.ResponseWriter, r *http.Request) {
	var request PostUserUsernameAvailableRequestObject

	var body PostUserUsernameAvailableJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserUsernameAvailable(ctx, request.(PostUserUsernameAvailableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserUsernameAvailable")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUserUsernameAvailableResponseObject); ok {
		if err := validResponse.VisitPostUserUsernameAvailableResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
