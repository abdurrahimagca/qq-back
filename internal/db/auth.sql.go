// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteOtpCodeEntryByAuthID = `-- name: DeleteOtpCodeEntryByAuthID :exec
DELETE FROM auth_otp_codes WHERE auth_id = $1
`

func (q *Queries) DeleteOtpCodeEntryByAuthID(ctx context.Context, authID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOtpCodeEntryByAuthID, authID)
	return err
}

const deleteOtpCodesByEmail = `-- name: DeleteOtpCodesByEmail :exec
DELETE FROM auth_otp_codes WHERE auth_id = (SELECT id FROM auth WHERE email = $1)
`

func (q *Queries) DeleteOtpCodesByEmail(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteOtpCodesByEmail, email)
	return err
}

const deleteOtpCodesByUserID = `-- name: DeleteOtpCodesByUserID :exec
DELETE FROM auth_otp_codes WHERE auth_id = (SELECT u.auth_id FROM users u WHERE u.id = $1)
`

func (q *Queries) DeleteOtpCodesByUserID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOtpCodesByUserID, userID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, privacy_level, auth_id, username, display_name, created_at, updated_at, avatar_key FROM users WHERE auth_id = (SELECT id FROM auth WHERE email = $1) LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PrivacyLevel,
		&i.AuthID,
		&i.Username,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvatarKey,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, privacy_level, auth_id, username, display_name, created_at, updated_at, avatar_key FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PrivacyLevel,
		&i.AuthID,
		&i.Username,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvatarKey,
	)
	return i, err
}

const getUserIdAndEmailByOtpCode = `-- name: GetUserIdAndEmailByOtpCode :one
SELECT users.id, auth.email , auth.id as auth_id
FROM users 
JOIN auth ON users.auth_id = auth.id 
JOIN auth_otp_codes ON auth.id = auth_otp_codes.auth_id 
WHERE auth_otp_codes.code = $1 AND auth_otp_codes.expires_at > CURRENT_TIMESTAMP 
LIMIT 1
`

type GetUserIdAndEmailByOtpCodeRow struct {
	ID     pgtype.UUID `json:"id"`
	Email  string      `json:"email"`
	AuthID pgtype.UUID `json:"authId"`
}

func (q *Queries) GetUserIdAndEmailByOtpCode(ctx context.Context, code string) (GetUserIdAndEmailByOtpCodeRow, error) {
	row := q.db.QueryRow(ctx, getUserIdAndEmailByOtpCode, code)
	var i GetUserIdAndEmailByOtpCodeRow
	err := row.Scan(&i.ID, &i.Email, &i.AuthID)
	return i, err
}

const insertAuth = `-- name: InsertAuth :one
INSERT INTO auth (email, provider, provider_id)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertAuthParams struct {
	Email      string       `json:"email"`
	Provider   AuthProvider `json:"provider"`
	ProviderID pgtype.Text  `json:"providerId"`
}

func (q *Queries) InsertAuth(ctx context.Context, arg InsertAuthParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertAuth, arg.Email, arg.Provider, arg.ProviderID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const insertAuthOtpCode = `-- name: InsertAuthOtpCode :one
INSERT INTO auth_otp_codes (auth_id, code)
VALUES ($1, $2)
RETURNING id
`

type InsertAuthOtpCodeParams struct {
	AuthID pgtype.UUID `json:"authId"`
	Code   string      `json:"code"`
}

func (q *Queries) InsertAuthOtpCode(ctx context.Context, arg InsertAuthOtpCodeParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertAuthOtpCode, arg.AuthID, arg.Code)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (auth_id, username, display_name, avatar_key)
VALUES ($1, $2, $3, $4)
RETURNING id, privacy_level, auth_id, username, display_name, created_at, updated_at, avatar_key
`

type InsertUserParams struct {
	AuthID      pgtype.UUID `json:"authId"`
	Username    string      `json:"username"`
	DisplayName pgtype.Text `json:"displayName"`
	AvatarKey   pgtype.Text `json:"avatarKey"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.AuthID,
		arg.Username,
		arg.DisplayName,
		arg.AvatarKey,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PrivacyLevel,
		&i.AuthID,
		&i.Username,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvatarKey,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = COALESCE($1, username), 
    display_name = COALESCE($2, display_name), 
    avatar_key = COALESCE($3, avatar_key), 
    privacy_level = COALESCE($4, privacy_level)
WHERE id = $5
RETURNING id, privacy_level, auth_id, username, display_name, created_at, updated_at, avatar_key
`

type UpdateUserParams struct {
	Username     pgtype.Text      `json:"username"`
	DisplayName  pgtype.Text      `json:"displayName"`
	AvatarKey    pgtype.Text      `json:"avatarKey"`
	PrivacyLevel NullPrivacyLevel `json:"privacyLevel"`
	ID           pgtype.UUID      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.DisplayName,
		arg.AvatarKey,
		arg.PrivacyLevel,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PrivacyLevel,
		&i.AuthID,
		&i.Username,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvatarKey,
	)
	return i, err
}
