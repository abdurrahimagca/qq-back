// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertAuth = `-- name: InsertAuth :one
INSERT INTO auth (email, provider, provider_id)
VALUES ($1, $2, $3)
RETURNING id
`

type InsertAuthParams struct {
	Email      string       `json:"email"`
	Provider   AuthProvider `json:"provider"`
	ProviderID pgtype.Text  `json:"providerId"`
}

func (q *Queries) InsertAuth(ctx context.Context, arg InsertAuthParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertAuth, arg.Email, arg.Provider, arg.ProviderID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const insertAuthOtpCode = `-- name: InsertAuthOtpCode :one
INSERT INTO auth_otp_codes (auth_id, code)
VALUES ($1, $2)
RETURNING id
`

type InsertAuthOtpCodeParams struct {
	AuthID pgtype.UUID `json:"authId"`
	Code   string      `json:"code"`
}

func (q *Queries) InsertAuthOtpCode(ctx context.Context, arg InsertAuthOtpCodeParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertAuthOtpCode, arg.AuthID, arg.Code)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (auth_id, username, display_name, avatar_url)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type InsertUserParams struct {
	AuthID      pgtype.UUID `json:"authId"`
	Username    string      `json:"username"`
	DisplayName pgtype.Text `json:"displayName"`
	AvatarUrl   pgtype.Text `json:"avatarUrl"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.AuthID,
		arg.Username,
		arg.DisplayName,
		arg.AvatarUrl,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $1, display_name = $2, avatar_url = $3
WHERE id = $4
RETURNING id
`

type UpdateUserParams struct {
	Username    pgtype.Text `json:"username"`
	DisplayName pgtype.Text `json:"displayName"`
	AvatarUrl   pgtype.Text `json:"avatarUrl"`
	ID          pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.ID,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
