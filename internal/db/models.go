// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AuthProvider string

const (
	AuthProviderEmailOtp    AuthProvider = "email_otp"
	AuthProviderGoogleOauth AuthProvider = "google_oauth"
)

func (e *AuthProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthProvider(s)
	case string:
		*e = AuthProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthProvider: %T", src)
	}
	return nil
}

type NullAuthProvider struct {
	AuthProvider AuthProvider `json:"authProvider"`
	Valid        bool         `json:"valid"` // Valid is true if AuthProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthProvider) Scan(value interface{}) error {
	if value == nil {
		ns.AuthProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthProvider), nil
}

type PrivacyLevel string

const (
	PrivacyLevelPublic      PrivacyLevel = "public"
	PrivacyLevelPrivate     PrivacyLevel = "private"
	PrivacyLevelFullPrivate PrivacyLevel = "full_private"
)

func (e *PrivacyLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PrivacyLevel(s)
	case string:
		*e = PrivacyLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for PrivacyLevel: %T", src)
	}
	return nil
}

type NullPrivacyLevel struct {
	PrivacyLevel PrivacyLevel `json:"privacyLevel"`
	Valid        bool         `json:"valid"` // Valid is true if PrivacyLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPrivacyLevel) Scan(value interface{}) error {
	if value == nil {
		ns.PrivacyLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PrivacyLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPrivacyLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PrivacyLevel), nil
}

type Auth struct {
	ID          pgtype.UUID      `json:"id"`
	Email       string           `json:"email"`
	Provider    AuthProvider     `json:"provider"`
	ProviderID  pgtype.Text      `json:"providerId"`
	IsSuspended bool             `json:"isSuspended"`
	CreatedAt   pgtype.Timestamp `json:"createdAt"`
	UpdatedAt   pgtype.Timestamp `json:"updatedAt"`
}

type AuthOtpCode struct {
	ID        pgtype.UUID      `json:"id"`
	AuthID    pgtype.UUID      `json:"authId"`
	Code      string           `json:"code"`
	ExpiresAt pgtype.Timestamp `json:"expiresAt"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
}

type User struct {
	ID           pgtype.UUID      `json:"id"`
	PrivacyLevel PrivacyLevel     `json:"privacyLevel"`
	AuthID       pgtype.UUID      `json:"authId"`
	Username     string           `json:"username"`
	DisplayName  pgtype.Text      `json:"displayName"`
	AvatarUrl    pgtype.Text      `json:"avatarUrl"`
	CreatedAt    pgtype.Timestamp `json:"createdAt"`
	UpdatedAt    pgtype.Timestamp `json:"updatedAt"`
}
